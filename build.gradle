plugins {
    id 'com.bmuschko.docker-remote-api' version '4.10.0'
}

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

version = '0.0.1'

allprojects {
    apply plugin: 'idea'

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    repositories {
        jcenter()
        mavenCentral()
    }

    ext {
        lombokVersion = '1.18.8'
        junitVersion = '5.5.1'
        assertjVersion = '3.12.2'
        mockitoVersion = '3.0.0'
    }
}

subprojects {
    apply plugin: 'java'

    version = rootProject.version + '-' + (System.getenv('CI_PIPELINE_ID') != null ? System.getenv('CI_PIPELINE_ID') : 'SNAPSHOT')
    group = 'org.hopto.delow'
    sourceCompatibility = 11

    buildDir = new File(rootProject.projectDir, "build/" + project.name)

    dependencies {
        implementation 'org.slf4j:slf4j-api:1.7.25'
        
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"
        compileOnly "org.projectlombok:lombok:$lombokVersion"

        testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
        testImplementation "org.assertj:assertj-core:$assertjVersion"
        testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"
    }

    test {
        useJUnitPlatform()
        reports.junitXml.destination = new File(rootProject.projectDir, "build/test-results/" + project.name)
        reports.html.destination = new File(rootProject.projectDir, "build/test-results/" + project.name + "/reports")
    }

    compileJava.options.encoding = 'UTF-8'

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

}